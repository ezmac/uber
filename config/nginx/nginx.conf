daemon off;

user www-data;
# Should be tweaked, but start with the number of cores available or "auto"
worker_processes 2;
pid /var/run/nginx.pid;
# Should be worker_connections * 4
worker_rlimit_nofile 31072;

events {
  # there should be more worker_connections in a production environment.,
  worker_connections 32768;
  # this allows a worker to accept multiple connections.  This config can ONLY accept 4096 simultaneous connections.
  multi_accept on;
  use epoll;
}
http {
  ##
  # Basic Settings
  ##
  resolver 127.0.0.1;
  proxy_cache_path /tmp/nginx/cache keys_zone=static:10m levels=1:2 max_size=50m;

  upstream local_apache {
        server localhost:8080;
  }
  server {
    
    set $accept_encoding "";
    if ($http_accept_encoding ~* gzip) {
        set $accept_encoding "gzip";
    }
    root /data/www/;
    server_name localhost;
    listen 80;
    location /phpmyadmin {
      root /usr/share/;
      index index.php index.html index.htm;
      location ~ ^/phpmyadmin/(.+\.php)$ {
        try_files $uri =404;
        root /usr/share/;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        include /etc/nginx/fastcgi_params;
        fastcgi_param PATH_INFO $fastcgi_script_name;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 256 4k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
        fastcgi_intercept_errors on;
      }
      location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
        root /usr/share/;
      }
    }
    location /phpMyAdmin {
      rewrite ^/* /phpmyadmin last;
                  }  location / {
      
      add_header X-Cache-Status $upstream_cache_status;
      add_header X-Cache-Foo $upstream_cache_status;
      proxy_read_timeout 5s;
      proxy_connect_timeout 25s;
      proxy_cache static;
      proxy_cache_key "$request_uri $accept_encoding";
      proxy_cache_valid 200 0m;
      proxy_cache_use_stale timeout http_504 updating;
      proxy_set_header Host localhost;
      proxy_set_header Upgrade $http_upgrade;
      #proxy_buffering off;
      #proxy_set_header Host RageQuitter;
      #proxy_set_header X-Real-IP $remote_addr;
      #keepalive_requests 0;
      # try to send the request through the static backend defined above.
      # if the static backend finds the file, it will be cached.
      # otherwise, it will 404.

      proxy_pass http://local_apache;
      }
  }

  charset                         utf-8;
  # if client_body_timeout is exceeded BETWEEN two successive reads by the server, the server returns 408, request timeout.
  client_body_timeout             05;
  # if the client does not transmit the entire header in this time, server returns 408, request timeout.
  client_header_timeout           05;
  client_max_body_size            10m;
  default_type                    application/octet-stream;
  # keep alive connections speed up successive requests by keeping the socket open. This controls how long to keep open without a new message.
  keepalive_timeout               15;
  # resetting timed out connections sends tcp rst to the client and clears the memory occupied by that socket.  This is probably a good thing to do.
  reset_timedout_connection       on;
  # if send_timeout is exceeded BETWEEN two successive writes by the server, the server closes the connection.
  send_timeout                    05;
  # don't send the nginx version in error messages or server response header field.
  server_tokens                   off;
  # allow the sendfile() function to be used
  sendfile                        on;
  # http://nginx.org/en/docs/hash.html  this could be a huge performance boost as it uses processor cache to avoid hitting memory.
  server_names_hash_bucket_size   64;
  # you don't need tcp_nodelay unless you're sending massive files.  Even then, you should apply it to just those transfers.
  tcp_nodelay                     off;
  # allows sending response header and beginning of a file in one packet AND sending a file in full packets.  Speedy!
  tcp_nopush                      on;
  include                         sites-enabled/*.conf;

  include /etc/nginx/mime.types;
  ##
  # Logging Settings
  ##

  access_log /var/log/nginx/access.log;
  # error log should probably not include debug in production
  error_log /var/log/nginx/error.log debug;

  ##
  # Gzip Settings
  ##

  # Gzip response for browsers that support it.
  gzip on;
  gzip_disable "msie6";

  gzip_vary on;
  # can be many options based on response headers from backend
  gzip_proxied expired no-cache no-store private auth;
  # higher levels = more compression, but it's slower.  5 is probably a good compromise.
  gzip_min_length 10240;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  ##
  # nginx-naxsi config
  ##
  # Uncomment it if you installed nginx-naxsi
  ##  https://www.owasp.org/index.php/OWASP_NAXSI_Project

  #include /etc/nginx/naxsi_core.rules;

  ##
  # nginx-passenger config
  ##
  # Uncomment it if you installed nginx-passenger
  ##
  
  #passenger_root /usr;
  #passenger_ruby /usr/bin/ruby;


  #this is still in the http block
  # These servers are for apache name based vhosts.  



  ##
  # Virtual Host Configs
  ##

  include /etc/nginx/conf.d/*.conf;
#include /etc/nginx/sites-enabled/*;
}




#mail {
#  # See sample authentication script at:
#  # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#  # auth_http localhost/auth.php;
#  # pop3_capabilities "TOP" "USER";
#  # imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#  server {
#    listen     localhost:110;
#    protocol   pop3;
#    proxy      on;
#  }
# 
#  server {
#    listen     localhost:143;
#    protocol   imap;
#    proxy      on;
#  }
#}

